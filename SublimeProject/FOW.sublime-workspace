{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mi",
				"minLightDistance\tabc"
			],
			[
				"fl",
				"float4\tabc"
			],
			[
				"fixed",
				"fixed4\tabc"
			],
			[
				"_Camer",
				"_CameraToWaterHeight"
			],
			[
				"floa",
				"float4"
			],
			[
				"heig",
				"height"
			],
			[
				"final",
				"finalResult"
			],
			[
				"per",
				"perceptualRoughness"
			],
			[
				"bsdf",
				"bsdfData"
			],
			[
				"bsd",
				"bsdfData"
			],
			[
				"pixe",
				"pixelHasWater"
			],
			[
				"fe",
				"featureFlags"
			],
			[
				"diff",
				"diffuseColor"
			],
			[
				"materi",
				"materialFeatures\t(WaterShadingOpaque.hlsl)"
			],
			[
				"Post",
				"Postvert\t(WaterGeometryPlane.hlsl)"
			],
			[
				"lightl",
				"lightloopColor"
			],
			[
				"refra",
				"refractedLighting"
			],
			[
				"_Camera",
				"_CameraToWaterHeight\t(WaterDeclaration.hlsl)"
			],
			[
				"world",
				"worldToTangent"
			],
			[
				"SC",
				"SCOPE_SCALE"
			],
			[
				"_Dis",
				"_DisplacementCoverageMax"
			],
			[
				"k",
				"k_identity3x3\t(Lit.hlsl)"
			],
			[
				"WaterS",
				"WaterShadingEvaluation.hlsl.meta"
			],
			[
				"EvaluateWor",
				"EvaluateWorldSpaceDirection\t(WaterCommon.hlsl)"
			],
			[
				"dire",
				"directionWS"
			],
			[
				"height",
				"heightDiff"
			],
			[
				"inter",
				"interpolators0"
			],
			[
				"vem",
				"vmesh"
			],
			[
				"posi",
				"positionSS"
			],
			[
				"posit",
				"positionWS"
			],
			[
				"pos",
				"positionRWS"
			],
			[
				"poso",
				"positionWS"
			],
			[
				"fra",
				"fragInputs"
			],
			[
				"position",
				"positionRWS"
			],
			[
				"Frag",
				"FragInputs"
			],
			[
				"GetW",
				"GetWorldSpaceXZ\t(TerrainCommon.hlsl)"
			],
			[
				"til",
				"tilingUV"
			],
			[
				"base",
				"baseColor"
			],
			[
				"Light",
				"LightLoop"
			],
			[
				"Buit",
				"BuiltinData"
			],
			[
				"light",
				"lightDirection"
			],
			[
				"ter",
				"terrainColor"
			],
			[
				"SHA",
				"SHADERPASS_DEPTH_ONLY\t(TerrainLit.shader)"
			],
			[
				"debu",
				"debugColor"
			],
			[
				"WaterShading",
				"WaterShadingOpaque.hlsl"
			],
			[
				"tp",
				"toPS"
			],
			[
				"Sur",
				"SurfaceAndBuiltinDataResult"
			],
			[
				"depth",
				"depthDiff"
			],
			[
				"dept",
				"depthDiff"
			],
			[
				"dep",
				"depthDiff"
			],
			[
				"_W",
				"_WaterColor\t(Water.shader)"
			],
			[
				"sin",
				"sinTheta"
			],
			[
				"normal",
				"normalWS"
			],
			[
				"Bui",
				"BuiltinData"
			],
			[
				"te",
				"terrain\t(TerrainLitData.hlsl)"
			],
			[
				"_WATERSHADING",
				"_WATERSHADINGTYPE_FORWARD\t(Water.shader)"
			],
			[
				"backgr",
				"backgroundColor"
			],
			[
				"WaterC",
				"WaterCommon.hlsl"
			],
			[
				"positionWS",
				"positionWS"
			],
			[
				"W",
				"WaterDeclaration.hlsl"
			],
			[
				"amb",
				"ambientOcclusion\t(LitData.hlsl)"
			],
			[
				"out",
				"outColor"
			],
			[
				"S",
				"WaterShadingEvaluation.hlsl"
			],
			[
				"foamC",
				"foamColorWithLighting\t(WaterShading.hlsl)"
			],
			[
				"Sha",
				"ShaderLibrary"
			],
			[
				"emi",
				"emissiveColor"
			],
			[
				"Fo",
				"Foam"
			],
			[
				"spe",
				"specularColor\t(WaterShading.hlsl)"
			],
			[
				"mate",
				"materialFeatures\t(LightEvaluation.hlsl)"
			],
			[
				"emiss",
				"emissiveColor\t(BuiltinData.cs.hlsl)"
			],
			[
				"pso",
				"positionRWS"
			],
			[
				"to",
				"toPS"
			],
			[
				"define",
				"defined\t(LitData.hlsl)"
			],
			[
				"Wa",
				"WaterShadingEvaluation.hlsl"
			],
			[
				"ambi",
				"ambientOcclusion\t(Lit.hlsl)"
			],
			[
				"fina",
				"finalColor"
			],
			[
				"bake",
				"bakeDiffuseLighting"
			],
			[
				"Final",
				"FinalWaterColorParam"
			],
			[
				"Eva",
				"EvaluateWaterColor"
			],
			[
				"foam",
				"foamColor"
			],
			[
				"def",
				"define\t(WaterGeometryClipMap.hlsl)"
			],
			[
				"de",
				"defined\t(WaterVertMesh.hlsl)"
			],
			[
				"nor",
				"normalWS"
			],
			[
				"Terrain",
				"TerrainCommon.hlsl"
			],
			[
				"posti",
				"positionRWS"
			],
			[
				"Vertex",
				"VertexInput"
			],
			[
				"Zer",
				"ZERO_INITIALIZE"
			],
			[
				"ble",
				"blendedDepth"
			],
			[
				"spec",
				"specularColor"
			],
			[
				"mel",
				"metallic"
			],
			[
				"pac",
				"packedNormal"
			],
			[
				"Samp",
				"Sample"
			],
			[
				"Sa",
				"Sample\t(ImpostorLibrary.hlsl)"
			],
			[
				"sampler",
				"sampler_MaskTex"
			],
			[
				"cus",
				"customBuffer1"
			],
			[
				"norma",
				"normal0"
			],
			[
				"diffu",
				"diffusionProfile(4"
			],
			[
				"meta",
				"metallic\t(ImpostorLibrary.hlsl)"
			],
			[
				"spc",
				"specularColor\t(ImpostorCommon.hlsl)"
			],
			[
				"SAMPLE",
				"SAMPLE_TEXTURE2D"
			],
			[
				"SV",
				"SV_Target\t(WaterBoundary.shader)"
			],
			[
				"par",
				"paramSSS"
			],
			[
				"tags",
				"Tags"
			],
			[
				"paramS",
				"paramStandard"
			],
			[
				"gBu",
				"gBuffer0"
			],
			[
				"Base",
				"BaseColorBuffer"
			],
			[
				"perce",
				"perceptualRoughness"
			],
			[
				"coat",
				"coatMask"
			],
			[
				"coa",
				"coatMask"
			],
			[
				"EvaluateMa",
				"EvaluateMaxWeightGBuffer"
			],
			[
				"surface",
				"subsurfaceMask\t(ImpostorCommon.hlsl)"
			],
			[
				"plan",
				"planarReflection"
			],
			[
				"mater",
				"materialFeatures"
			],
			[
				"Surfa",
				"SurfaceData"
			],
			[
				"matr",
				"materialFeatures"
			],
			[
				"subsurfa",
				"subsurfaceMask\t(LitDataIndividualLayer.hlsl)"
			],
			[
				"diffus",
				"diffusionProfile\t(LitDataIndividualLayer.hlsl)"
			],
			[
				"al",
				"albedo1"
			],
			[
				"SHADER",
				"SHADERPASS_GBUFFER\t(Lit.shader)"
			],
			[
				"SHADERPASS",
				"SHADERPASS_DEPTH_ONLY\t(EcosystemFoliageGPULit.shader)"
			],
			[
				"SHADE",
				"SHADERPASS\t(EcosystemFoliageGPULit.shader)"
			],
			[
				"view",
				"viewPos"
			],
			[
				"worl",
				"worldPos"
			],
			[
				"Decode",
				"DecodeFromNormalBuffer\t(Lit.hlsl)"
			],
			[
				"Transform",
				"TransformObjectToWorld\t(VertMesh.hlsl)"
			],
			[
				"HDRPG",
				"HDRPGBuffer0"
			],
			[
				"HDRPGBu",
				"HDRPGBuffer0\t(ImpostorLegacyGBufferPacker.shader)"
			],
			[
				"norm",
				"normal\t(ShaderPacker.shader)"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Shader \"Hidden/FOWEffect\"\n{\n\tProperties {}\n\t\n\tSubShader\n\t{\n\t\tCull Off \n\t\tZWrite Off \n\t\tZTest Always\n\n\t\tPass\n\t\t{\n\t\t\tCGPROGRAM\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t\n\t\t\t#pragma shader_feature FOWSHADOWTYPE_SDF\n\n\t\t\t#include \"UnityCG.cginc\"\n\n\t\t\tstruct vertInput\n\t\t\t{\n\t\t\t\tfixed4 vertex : POSITION;\n\t\t\t\tfixed2 texCoord : TEXCOORD0;\n\t\t\t};\n\n\t\t\tstruct fragInput\n\t\t\t{\n\t\t\t\tfixed2 texCoord : TEXCOORD0;\n\t\t\t\tfixed4 positionCS : SV_POSITION;\n\t\t\t};\n\n\t\t\t// sampler2D _CameraColorBuffer;\n\t\t\t// sampler2D _CustomDepthTexture;\n\t\t\t// sampler2D _FOWTexture;\n\t\t\t\n\t\t\tTexture2D _CameraDepthTexture;\n\t\t\tTexture2D _CameraColorBuffer;\n\t\t\tTexture2D _FOWTexture;\n\t\t\tSamplerState _FOW_Trilinear_Clamp_Sampler;\n\n\t\t\tfixed _FogValue;\n\t\t\tfixed2 _InvSize;\n\t\t\tfixed4 _PositionWS;\n\t\t\tfloat4x4 _InvVP;\n\t\t\tfloat4x4 _FOWWorldToLocal;\n\n\t\t\t// shading\n\t\t\thalf _LerpValue;\n\t\t\thalf4 _FogColor;\n\t\t\t\n\t\t\tfragInput vert (vertInput input)\n\t\t\t{\n\t\t\t    fragInput output;\n\t\t\t        \n\t\t\t    output.positionCS = UnityObjectToClipPos(input.vertex);\n                output.texCoord = input.texCoord;\n                \n\t\t\t    return output;\n\t\t\t}\n\n           fixed3 ComputeWorldSpacePosition(fixed2 positionNDC, fixed deviceDepth)\n           {\n               fixed4 positionCS = fixed4(fixed3(positionNDC, deviceDepth) * 2.0f - 1.0f, 1.0f);\n               fixed4 positionVS = mul(_InvVP, positionCS);\n\n               fixed3 positionWS = positionVS.xyz / positionVS.w;\n               return positionWS;\n           }\n\n\t\t\tfixed4 frag (fragInput input) : SV_Target\n\t\t\t{\n\t\t\t\t// fixed depth = SAMPLE_DEPTH_TEXTURE(_CustomDepthTexture, input.texCoord);\n\t\t\t\tfixed depth = _CameraDepthTexture.Sample(_FOW_Trilinear_Clamp_Sampler, input.texCoord);\n\t\t\t    \n\t\t\t#if defined(UNITY_REVERSED_Z)\n\t\t\t\tdepth = 1.0f - depth;\n\t\t\t#endif\n\t\t\t\t// return fixed4(depth.xxx, 1.0f);\n\n\t\t\t\t// recreate world space position \n\t\t\t    fixed3 positionWS = ComputeWorldSpacePosition(input.texCoord, depth);\n\t\t\t    fixed4 positionLS = mul(_FOWWorldToLocal, fixed4(positionWS, 1.0f));\n\t\t\t    positionLS /= positionLS.w;\n\n\t\t\t    // sample texture in mask's local space \n\t\t\t    // fixed3 fogValue = tex2D(_FOWTexture, positionLS.xz * fixed2(_InvSize));\n\t\t\t    // fixed3 bgColor  = tex2D(_CameraColorBuffer, input.texCoord);\n\t\t\t    fixed3 fogValue = _FOWTexture.Sample(_FOW_Trilinear_Clamp_Sampler, positionLS.xz * fixed2(_InvSize));\n\t\t\t    fixed3 bgColor  = _CameraColorBuffer.Sample(_FOW_Trilinear_Clamp_Sampler, input.texCoord);\n\n\t\t\t    fixed3 color;\n\t    \t#ifdef FOWSHADOWTYPE_SDF\n\t\t    \tcolor = bgColor * max(fogValue.r, _FogValue);\n\t\t    #else\n\t\t\t\tcolor = lerp(_FogColor.rgb, fixed3(1, 1, 1), fogValue.r * _FogColor.a);\n\n\t\t\t    // Mixed between last and current frame fog texture\n\t\t\t\tfixed visual = lerp(fogValue.b, fogValue.g, _LerpValue);\n\t\t\t\tcolor = lerp(color, fixed3(1, 1, 1), visual);\n\t\t\t\tcolor *= bgColor;\n\t\t    #endif\n\t\t\t    return fixed4(color, 1.0f);\n\t\t\t}\n\t\t\tENDCG\n\t\t}\n\t}\n}\n",
			"file": "/E/Program/Unity/FOW/Assets/FOW/Shaders/FOWEffect.shader",
			"file_size": 3013,
			"file_write_time": 132069095700412882,
			"settings":
			{
				"buffer_size": 2902,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "/E/Program/Unity/FOW/Assets/FOW/Shaders/FOWShadowSDF.shader",
			"settings":
			{
				"buffer_size": 4518,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/E/Program/Unity/Water/Assets/Scenes/Water.shader",
			"settings":
			{
				"buffer_size": 1069,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/E/OneDrive - FreeShadow/Sync/BH3/Water.shader",
			"settings":
			{
				"buffer_size": 15037,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/E/Program/Unity/FOW/Assets/FOW/Shaders/FOWJumpFloodSDF.shader",
			"settings":
			{
				"buffer_size": 3984,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"go to",
				"Go To Definition"
			],
			[
				"pai",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"page",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 161.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Program/Unity/FOW/Assets",
		"/E/Program/Unity/FOW/Assets/FOW",
		"/E/Program/Unity/FOW/Assets/Plugins",
		"/E/Program/Unity/FOW/Assets/Scenes"
	],
	"file_history":
	[
		"/E/OneDrive - FreeShadow/Sync/BH3/Water.shader",
		"/E/Program/Unity/FOW/.gitignore",
		"/C/Users/Bentl/Documents/Program/fakeUnityShader/fake_unity_shader/shader_parser/shader_generator.lua",
		"/C/Users/Bentl/Documents/Program/Sophia/Sophia/shaders/perlinWorleyNoise.shader",
		"/C/Users/Bentl/Documents/Program/Sophia/Sophia/shaders/perlinNoise.shader",
		"/C/Users/Bentl/Documents/Program/fakeUnityShader/fake_unity_shader/shader_parser/shader_define.lua",
		"/C/Users/Bentl/Documents/Program/Sophia/Sophia/thirdparty/fakeUnityShader/fake_unity_shader/shader_parser/shader_generator.lua",
		"/C/Users/Bentl/Documents/Program/Sophia/.gitmodules",
		"/C/Users/Bentl/Documents/Program/Sophia/.gitignore",
		"/C/Users/Bentl/.ssh/id_rsa.pub",
		"/C/Users/Bentl/Documents/Program/Sophia/Sophia/thirdparty/t3Math/.gitignore",
		"/C/Users/Bentl/Documents/Program/Sophia/Sophia/thirdparty/t3DataStructures/.gitignore",
		"/C/Users/Bentl/Documents/Program/Sophia/README.md",
		"/E/Program/Renderer/Sophia/Sophia/shaders/ssao/aoLightingPS.hlsl",
		"/E/Program/Unity/SublimeProject/Cloud.sublime-project",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/Common.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/ShaderVariablesFunctions.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterCaustics.shader",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LongRangeLight.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/TerrainLitData.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/TerrainLit.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterCommon.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/TerrainCommon.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LightLoop/Deferred.compute",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/NormalBuffer.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/ImageBasedLighting.hlsl",
		"/D/Program/Unity/ProjectXOld/Assets/SpaceCore/Shaders/Ocean/Caustic.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterShadingEvaluation.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Builtin/BuiltinData.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/Lit.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LightLoop/materialflags.compute",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Material.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/Water.shader",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LightLoop/LightLoop.cs.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/Lit.cs.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterShadingForward.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/Packing.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/Macros.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/EcosystemShaderPass/ShaderPassGBuffer.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/LitBuiltinData.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LightLoop/lightlistbuild.compute",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/ShaderPass/ShaderPassGBuffer.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/LitDataIndividualLayer.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LightLoop/LightLoop.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LightLoop/LightLoopDef.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Planet/DynamicTiling.cs",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/ShaderIncludes/Cubemap.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/ShaderPass/VaryingMesh.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterScreenSpaceMask.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/Water.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterGeometryClipMap.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterGeometryPlane.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterDeclaration.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterShadingMesh.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LightEvaluation.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/MaterialEvaluation.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/PreIntegratedFGD/PreIntegratedFGD.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Builtin/BuiltinData.cs.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/LightDefinition.cs.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/SubsurfaceScattering/SubsurfaceScattering.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/ShaderPass/ShaderPassForward.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/ShaderPass/TessellationShare.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Terrain/Render/TerrainRendererSystem.cs",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterBoundary.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterFogUnder.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterMaskBlur.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterShadingOpaque.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterShading.hlsl",
		"/D/Program/Unity/ProjectX/Assets/3rd/LIVENDA_CTAA_VR/LIVENDA CTAA VR OCULUS/Resources/CTAAVR_Oculus.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Terrain/TerrainRenderDataCache.cs",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/TerrainLitDataMeshModification.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/TerrainInstancing.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/EcosystemShaderPass/ShaderPassForward.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/LitData.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Rendering/PreRenderSystem.cs",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/EcosystemShaderPass/VaryingMesh.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Utilities/AutoSphereTiling.cs",
		"/D/Program/Unity/ProjectX/Assets/3rd/LIVENDA_CTAA_VR/LIVENDA CTAA VR VIVE/Resources/VelocityBufferCTAAVR_Vive.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/Deprecated/WaterDeprecated.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/ShaderPass/VertMesh.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/ShaderPass/ShaderPassVelocity.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/UnityInstancing.hlsl",
		"/D/Program/Unity/ProjectX/Assets/AssetLookdev/Res/Material/Gray.shader",
		"/D/Program/Unity/ProjectX/Assets/AssetLookdev/Res/Material/MetalBall.shader",
		"/D/Program/Unity/ProjectX/Assets/Plugins/AmplifyShaderEditor/Plugins/EditorResources/Templates/EcosystemGPULitTemplate.shader",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/API/D3D11.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/EcosystemShaderPass/TessellationShare.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/MaterialUtilities.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/MicroSplatSurface.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/Deprecated/WaterGeometryDeprecated.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterMask.shader",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Lighting/Lighting.hlsl",
		"/D/Program/Unity/ProjectX/Assets/Plugins/AmplifyImpostors/Plugins/EditorResources/Shaders/Runtime/HDRP/ImpostorLibrary.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterTest.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/StackLit/StackLit.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/Shadow/Shadow.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/Lit.shader",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Sky/AtmosphericScattering/AtmosphericScattering.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/ClipmapSeaLitData.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/ClipmapSeaLit.shader",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/Sampling/SampleUVMapping.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/LitDataMeshModification.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterFoam.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/TerrainBaseLitData.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterGeometryEvaluation.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Dependency/Ultimate Water System/Shaders/Includes/WaterDisplace.cginc",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/BSDF.hlsl",
		"/D/Program/Unity/ProjectX/Assets/Plugins/AmplifyImpostors/Plugins/EditorResources/Shaders/Runtime/HDRP/ImpostorCommon.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/CommonLighting.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterShadingCommon.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterGeometryCommon.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/Core/CoreRP/ShaderLibrary/Tessellation.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/ShaderPass/LitSharePass.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/WaterClipMap.shader",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Sky/SkyVariables.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Editor/Terrain/TerrainXMenuEditorWindow.cs",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Shader/Debug/WaterCubeMap.shader",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/EcosystemFoliageGPULit.shader",
		"/D/Program/Unity/ProjectXOld/Assets/SpaceCore/Scripts/Ocean/PlanetOcean.cs",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Water/Material/Water.mat",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/EcosystemShaderPass/VertMesh.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Experimental/Water/Shader/WaterScreenSpaceMask.shader",
		"/C/Users/binbin.guan/OneDrive - FreeShadow/Sync/Unity Report",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/TerrainShaders/WireFrameGS.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SRP/ScriptableRenderPipeline/HDRenderPipeline/HDRP/Material/Lit/LitTessellation.shader",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Experimental/Water/Shader/WaterVertMesh.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Experimental/Water/Shader/Water.hlsl",
		"/D/Program/Unity/ProjectX/Assets/SpaceCore/Experimental/Water/Shader/Water.shader"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 169.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"fixed4",
			"i",
			"v2f",
			"appdata",
			"uv",
			"Trilinear",
			"fixed2",
			"fixed4"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/E/Program/Unity/FOW/Assets/FOW/Shaders/FOWEffect.shader",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2902,
						"regions":
						{
						},
						"selection":
						[
							[
								1808,
								1808
							]
						],
						"settings":
						{
							"in_converting": true,
							"is_init_dirty_state": false,
							"origin_content": "Shader \"Hidden/FOWEffect\"\n{\n\tProperties {}\n\t\n\tSubShader\n\t{\n\t\tCull Off \n\t\tZWrite Off \n\t\tZTest Always\n\n\t\tPass\n\t\t{\n\t\t\tCGPROGRAM\n\t\t\t#pragma vertex vert\n\t\t\t#pragma fragment frag\n\t\t\t\n\t\t\t#pragma shader_feature FOWSHADOWTYPE_SDF\n\n\t\t\t#include \"UnityCG.cginc\"\n\n\t\t\tstruct vertInput\n\t\t\t{\n\t\t\t\tfixed4 vertex : POSITION;\n\t\t\t\tfixed2 texCoord : TEXCOORD0;\n\t\t\t};\n\n\t\t\tstruct fragInput\n\t\t\t{\n\t\t\t\tfixed2 texCoord : TEXCOORD0;\n\t\t\t\tfixed4 positionCS : SV_POSITION;\n\t\t\t};\n\n\t\t\t// sampler2D _CameraColorBuffer;\n\t\t\t// sampler2D _CustomDepthTexture;\n\t\t\t// sampler2D _FOWTexture;\n\t\t\t\n\t\t\tTexture2D _CameraDepthTexture;\n\t\t\tTexture2D _CameraColorBuffer;\n\t\t\tTexture2D _FOWTexture;\n\t\t\tSamplerState _FOW_Trilinear_Clamp_Sampler;\n\n\t\t\tfixed _FogValue;\n\t\t\tfixed2 _InvSize;\n\t\t\tfixed4 _PositionWS;\n\t\t\tfloat4x4 _InvVP;\n\t\t\tfloat4x4 _FOWWorldToLocal;\n\n\t\t\t// shading\n\t\t\thalf _LerpValue;\n\t\t\thalf4 _FogColor;\n\t\t\t\n\t\t\tfragInput vert (vertInput input)\n\t\t\t{\n\t\t\t    fragInput output;\n\t\t\t        \n\t\t\t    output.positionCS = UnityObjectToClipPos(input.vertex);\n                output.texCoord = input.texCoord;\n                \n\t\t\t    return output;\n\t\t\t}\n\n           fixed3 ComputeWorldSpacePosition(fixed2 positionNDC, fixed deviceDepth)\n           {\n               fixed4 positionCS = fixed4(fixed3(positionNDC, deviceDepth) * 2.0f - 1.0f, 1.0f);\n               fixed4 positionVS = mul(_InvVP, positionCS);\n\n               fixed3 positionWS = positionVS.xyz / positionVS.w;\n               return positionWS;\n           }\n\n\t\t\tfixed4 frag (fragInput input) : SV_Target\n\t\t\t{\n\t\t\t\t// fixed depth = SAMPLE_DEPTH_TEXTURE(_CustomDepthTexture, input.texCoord);\n\t\t\t\tfixed depth = _CameraDepthTexture.Sample(_FOW_Trilinear_Clamp_Sampler, input.texCoord);\n\t\t\t    \n\t\t\t#if defined(UNITY_REVERSED_Z)\n\t\t\t\tdepth = 1.0f - depth;\n\t\t\t#endif\n\t\t\t\t// return fixed4(depth.xxx, 1.0f);\n\n\t\t\t\t// recreate world space position \n\t\t\t    fixed3 positionWS = ComputeWorldSpacePosition(input.texCoord, depth);\n\t\t\t    fixed4 positionLS = mul(_FOWWorldToLocal, fixed4(positionWS, 1.0f));\n\t\t\t    positionLS /= positionLS.w;\n\n\t\t\t    // sample texture in mask's local space \n\t\t\t    // fixed3 fogValue = tex2D(_FOWTexture, positionLS.xz * fixed2(_InvSize));\n\t\t\t    // fixed3 bgColor  = tex2D(_CameraColorBuffer, input.texCoord);\n\t\t\t    fixed3 fogValue = _FOWTexture.Sample(_FOW_Trilinear_Clamp_Sampler, positionLS.xz * fixed2(_InvSize));\n\t\t\t    fixed3 bgColor  = _CameraColorBuffer.Sample(_FOW_Trilinear_Clamp_Sampler, input.texCoord);\n\n\t\t\t    fixed3 color;\n\t    \t#ifdef FOWSHADOWTYPE_SDF\n\t\t    \tcolor = bgColor * max(fogValue.r, _FogValue);\n\t\t    #else\n\t\t\t\tcolor = lerp(_FogColor.rgb, fixed3(1, 1, 1), fogValue.r * _FogColor.a);\n\n\t\t\t    // Mixed between last and current frame fog texture\n\t\t\t\tfixed visual = lerp(fogValue.b, fogValue.g, _LerpValue);\n\t\t\t\tcolor = lerp(color, fixed3(1, 1, 1), visual);\n\t\t\t\tcolor *= bgColor;\n\t\t    #endif\n\t\t\t    return fixed4(color, 1.0f);\n\t\t\t}\n\t\t\tENDCG\n\t\t}\n\t}\n}\n",
							"origin_encoding": "UTF-8-SIG",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1365.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/E/Program/Unity/FOW/Assets/FOW/Shaders/FOWShadowSDF.shader",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4518,
						"regions":
						{
						},
						"selection":
						[
							[
								4089,
								4089
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2434.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/E/Program/Unity/Water/Assets/Scenes/Water.shader",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1069,
						"regions":
						{
						},
						"selection":
						[
							[
								55,
								55
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 57.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/E/OneDrive - FreeShadow/Sync/BH3/Water.shader",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15037,
						"regions":
						{
						},
						"selection":
						[
							[
								138,
								138
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 85.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/E/Program/Unity/FOW/Assets/FOW/Shaders/FOWJumpFloodSDF.shader",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3984,
						"regions":
						{
						},
						"selection":
						[
							[
								3897,
								3897
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2964.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 59.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 134.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 128.0
	},
	"output.variable_get":
	{
		"height": 316.0
	},
	"pinned_build_system": "",
	"project": "FOW.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"WaterCommon",
				"SpaceCore\\Water\\Shader\\WaterCommon.hlsl"
			],
			[
				"terr",
				"SpaceCore\\TerrainShaders\\TerrainLit.shader"
			],
			[
				"terrianlitda",
				"SpaceCore\\TerrainShaders\\TerrainLitData.hlsl"
			],
			[
				"terri",
				"SpaceCore\\TerrainShaders\\TerrainLit.shader"
			],
			[
				"water.sh",
				"SpaceCore\\Water\\Shader\\Water.shader"
			],
			[
				"watersha",
				"SpaceCore\\Water\\Shader\\WaterShadingMesh.hlsl"
			],
			[
				"lightloop",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightLoop\\LightLoop.hlsl"
			],
			[
				"material",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightLoop\\materialflags.compute"
			],
			[
				"materialfl",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightLoop\\materialflags.compute"
			],
			[
				"lightlist",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightLoop\\lightlistbuild.compute"
			],
			[
				"shade",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\ShaderPassGBuffer.hlsl"
			],
			[
				"ShaderPassGBuffer",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassGBuffer.hlsl"
			],
			[
				"defer",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightLoop\\Deferred.compute"
			],
			[
				"shader",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassGBuffer.hlsl"
			],
			[
				"lightlo",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightLoop\\LightLoop.hlsl"
			],
			[
				"terrainlit",
				"SpaceCore\\TerrainShaders\\TerrainLitData.hlsl"
			],
			[
				"terrian",
				"SpaceCore\\TerrainShaders\\TerrainLit.shader"
			],
			[
				"litin",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitDataIndividualLayer.hlsl"
			],
			[
				"shaderpassg",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\ShaderPassGBuffer.hlsl"
			],
			[
				"Macros",
				"SRP\\ScriptableRenderPipeline\\Core\\CoreRP\\ShaderLibrary\\Macros.hlsl"
			],
			[
				"shaderpass",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassForward.hlsl"
			],
			[
				"lon",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LongRangeLight.hlsl"
			],
			[
				"prerender",
				"SpaceCore\\Rendering\\PreRenderSystem.cs"
			],
			[
				"dyna",
				"SpaceCore\\Planet\\DynamicTiling.cs"
			],
			[
				"shaderpas",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\ShaderPassForward.hlsl"
			],
			[
				"terraincommon",
				"SpaceCore\\TerrainShaders\\TerrainCommon.hlsl"
			],
			[
				"longran",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LongRangeLight.hlsl"
			],
			[
				"terrianCom",
				"SpaceCore\\TerrainShaders\\TerrainCommon.hlsl"
			],
			[
				"cube",
				"SpaceCore\\ShaderIncludes\\Cubemap.hlsl"
			],
			[
				"cubem",
				"SpaceCore\\ShaderIncludes\\Cubemap.hlsl"
			],
			[
				"water",
				"SpaceCore\\Water\\Shader\\Water.shader"
			],
			[
				"terrainlitd",
				"SpaceCore\\TerrainShaders\\TerrainLitData.hlsl"
			],
			[
				"vert",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\VertMesh.hlsl"
			],
			[
				"litind",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitDataIndividualLayer.hlsl"
			],
			[
				"litdata",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitData.hlsl"
			],
			[
				"dynamic",
				"SpaceCore\\Planet\\DynamicTiling.cs"
			],
			[
				"terrainCom",
				"SpaceCore\\TerrainShaders\\TerrainCommon.hlsl"
			],
			[
				"terranrenderdat",
				"SpaceCore\\Terrain\\TerrainRenderDataCache.cs"
			],
			[
				"Lighting",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\Lighting.hlsl"
			],
			[
				"terrianLit",
				"SpaceCore\\TerrainShaders\\TerrainLit.shader"
			],
			[
				"terrain",
				"SpaceCore\\TerrainShaders\\TerrainLit.shader"
			],
			[
				"",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitDataIndividualLayer.hlsl"
			],
			[
				"lit.shader",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\Lit.shader"
			],
			[
				"liti",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitDataIndividualLayer.hlsl"
			],
			[
				"sea",
				"SpaceCore\\TerrainShaders\\ClipmapSeaLit.shader"
			],
			[
				"shaderfor",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\ShaderPassForward.hlsl"
			],
			[
				"VaryingMesh.hlsl",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\VaryingMesh.hlsl"
			],
			[
				"litindi",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitDataIndividualLayer.hlsl"
			],
			[
				"lightloo",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightLoop\\LightLoop.hlsl"
			],
			[
				"TerrainCommon",
				"SpaceCore\\TerrainShaders\\TerrainCommon.hlsl"
			],
			[
				"ClipmapSeaLitData",
				"SpaceCore\\TerrainShaders\\ClipmapSeaLitData.hlsl"
			],
			[
				"sealit",
				"SpaceCore\\TerrainShaders\\ClipmapSeaLit.shader"
			],
			[
				"water.hlsl",
				"SpaceCore\\Water\\Shader\\Water.hlsl"
			],
			[
				"longlight",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LongRangeLight.hlsl"
			],
			[
				"ShaderVariablesFunctions",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderVariablesFunctions.hlsl"
			],
			[
				"tesse",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\TessellationShare.hlsl"
			],
			[
				"watersg",
				"SpaceCore\\Water\\Shader\\WaterShading.hlsl"
			],
			[
				"TerrainLitDataMeshModification",
				"SpaceCore\\TerrainShaders\\TerrainLitDataMeshModification.hlsl"
			],
			[
				"TerrainLitData",
				"SpaceCore\\TerrainShaders\\TerrainLitData.hlsl"
			],
			[
				"terrainLit",
				"SpaceCore\\TerrainShaders\\TerrainLit.shader"
			],
			[
				"LitDataMeshModification",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitDataMeshModification.hlsl"
			],
			[
				"litshare",
				"SpaceCore\\TerrainShaders\\ShaderPass\\LitSharePass.hlsl"
			],
			[
				"VaryingMesh",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\VaryingMesh.hlsl"
			],
			[
				"LitData",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitData.hlsl"
			],
			[
				"TessellationShare",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\TessellationShare.hlsl"
			],
			[
				"TerrainInstancing",
				"SpaceCore\\TerrainShaders\\TerrainInstancing.hlsl"
			],
			[
				"LitSharePass",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\ShaderPass\\LitSharePass.hlsl"
			],
			[
				"WireFrameGS",
				"SpaceCore\\TerrainShaders\\WireFrameGS.hlsl"
			],
			[
				"PerPatchData",
				"SpaceCore\\Terrain\\Patch\\PatchDataCPU.cs"
			],
			[
				"littes",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitTessellation.shader"
			],
			[
				"SampleUVMapping",
				"SRP\\ScriptableRenderPipeline\\Core\\CoreRP\\ShaderLibrary\\Sampling\\SampleUVMapping.hlsl"
			],
			[
				"LitBuiltinData",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitBuiltinData.hlsl"
			],
			[
				"VertMesh",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\VertMesh.hlsl"
			],
			[
				"Tessellation.hlsl",
				"SRP\\ScriptableRenderPipeline\\Core\\CoreRP\\ShaderLibrary\\Tessellation.hlsl"
			],
			[
				"watershadin",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterShading.hlsl"
			],
			[
				"water.sha",
				"SpaceCore\\Experimental\\Water\\Shader\\Water.shader"
			],
			[
				"Decal.hls",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Decal\\Decal.hlsl"
			],
			[
				"Lighting.hlsl",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\Lighting.hlsl"
			],
			[
				"impos",
				"AmplifyImpostors\\Plugins\\EditorResources\\Shaders\\Runtime\\HDRP\\ImpostorHDRP.shader"
			],
			[
				"waterca",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterCaustics.shader"
			],
			[
				"ShaderVariables",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderVariables.hlsl"
			],
			[
				"water.shader",
				"SpaceCore\\Experimental\\Water\\Shader\\Water.shader"
			],
			[
				"MaterialUtilities",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\MaterialUtilities.hlsl"
			],
			[
				"DecalSharePass",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Decal\\ShaderPass\\DecalSharePass.hlsl"
			],
			[
				"DecalProperties",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Decal\\DecalProperties.hlsl"
			],
			[
				"ShaderPassDBuffer",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassDBuffer.hlsl"
			],
			[
				"decal.shader",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Decal\\Decal.shader"
			],
			[
				"hdrenderpipeline//decal",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Decal\\Decal.hlsl"
			],
			[
				"watercau",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterCaustics.shader"
			],
			[
				"ShaderPassLightTransport",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassLightTransport.hlsl"
			],
			[
				"ecosystemgpui",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\EcosystemFoliageGPULit.shader"
			],
			[
				" ecosystemlit",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\EcosystemFoliageLit.shader"
			],
			[
				"terrainlitdata",
				"SpaceCore\\TerrainShaders\\TerrainLitData.hlsl"
			],
			[
				"waterboud",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterBoundary.shader"
			],
			[
				"waterbou",
				"SpaceCore\\Experimental\\Water\\Scripts\\WaterBoundary.cs"
			],
			[
				"ShaderPassDepthOnly",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassDepthOnly.hlsl"
			],
			[
				"shaderpassfo",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassForward.hlsl"
			],
			[
				"ecosystemFoli",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\EcosystemFoliageGPULit.shader"
			],
			[
				"LongRangeLight",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LongRangeLight.hlsl"
			],
			[
				"watergeo",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterGeometry.hlsl"
			],
			[
				"LitData.hlsl",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitData.hlsl"
			],
			[
				"ecosyfol",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\EcosystemFoliageLit.shader"
			],
			[
				"lit.hlsl",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\Lit.hlsl"
			],
			[
				"shaderpassfor",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassForward.hlsl"
			],
			[
				"shaderpa",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassDBuffer.hlsl"
			],
			[
				"lit.",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\Lit.shader"
			],
			[
				"watershad",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterShading.hlsl"
			],
			[
				"waterfog",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterFogUnder.shader"
			],
			[
				"Deferr",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightLoop\\Deferred.compute"
			],
			[
				"shaderpassfow",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\ShaderPassForward.hlsl"
			],
			[
				"EcosystemFoliageGPULit",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\EcosystemFoliageGPULit.shader"
			],
			[
				"shaderde",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\ShaderPassDepthOnly.hlsl"
			],
			[
				"watershading",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterShading.hlsl"
			],
			[
				"lit.sh",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\Lit.shader"
			],
			[
				"shaderpsdf",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\ShaderPassDBuffer.hlsl"
			],
			[
				"lit",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\Lit.shader"
			],
			[
				"ecosystemfoli",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\EcosystemFoliageGPULit.shader"
			],
			[
				"waterge",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterGeometry.hlsl"
			],
			[
				"gbuffer",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderPass\\ShaderPassGBuffer.hlsl"
			],
			[
				"shaderva",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\ShaderVariablesFunctions.hlsl"
			],
			[
				"Dither Functions",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\EcosystemShaderPass\\Dither Functions.hlsl"
			],
			[
				"waterGe",
				"SpaceCore\\Experimental\\Water\\Shader\\WaterGeometry.hlsl"
			],
			[
				"litdaa",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\LitData.hlsl"
			],
			[
				"DebugDisplay",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Debug\\DebugDisplay.hlsl"
			],
			[
				"LightEvaluation",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightEvaluation.hlsl"
			],
			[
				"lit.shade",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Material\\Lit\\Lit.shader"
			],
			[
				"lighte",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\LightEvaluation.hlsl"
			],
			[
				"lighting",
				"SRP\\ScriptableRenderPipeline\\HDRenderPipeline\\HDRP\\Lighting\\Lighting.hlsl"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 400.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 600.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 199.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
